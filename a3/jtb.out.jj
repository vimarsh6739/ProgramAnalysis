//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(QParJavaParser)
import syntaxtree.*;
import java.util.Vector;


public class QParJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(QParJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <COLON: ":">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <AND: "&&">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <CLASS: "class">
   | <INTERFACE: "interface">
   | <ELSE: "else">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <SYNCH: "synchronized">
   | <FOR: "for">
   | <INTEGER: "int">
   | <LENGTH: "length">
   | <MAIN: "main">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <STATIC: "static">
   | <STRING: "String">
   | <THIS: "this">
   | <TRUE: "true">
   | <PRINT: "System.out.println">
   | <VOID: "void">
   | <SCOMMENT1: "/*">
   | <SCOMMENT2: "*/">
   | <MHP: "mhp?">
   | <START: "start">
   | <WAIT: "wait">
   | <NOTIFY: "notify">
   | <NOTIFYALL: "notifyAll">
   | <JOIN: "join">
   | <RUN: "run">
   | <THREAD: "Thread">
   | <TRY: "try">
   | <CATCH: "catch">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   TypeDeclaration n2;
   NodeListOptional n3 = new NodeListOptional();
   Query n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=MainClass()
   (
      n2=TypeDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n4=Query()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6=<EOF> { 
      n6.beginColumn++; n6.endColumn++;
      n5 = JTBToolkit.makeNodeToken(n6);
   }
   
   { return new Goal(n0,n1,n3,n5); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeListOptional n30 = new NodeListOptional();
   VarDeclaration n31;
   NodeListOptional n32 = new NodeListOptional();
   QParStatement n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   Identifier n40;
   Identifier n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="public" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="static" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="void" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="main" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
   n16="String" { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="[" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="]" { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=Identifier()
   n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
   n25="{" { n24 = JTBToolkit.makeNodeToken(n25); }
   n27="try" { n26 = JTBToolkit.makeNodeToken(n27); }
   n29="{" { n28 = JTBToolkit.makeNodeToken(n29); }
   (
      LOOKAHEAD(VarDeclaration())
      n31=VarDeclaration()
      { n30.addNode(n31); }
   )*
   { n30.nodes.trimToSize(); }
   (
      n33=QParStatement()
      { n32.addNode(n33); }
   )*
   { n32.nodes.trimToSize(); }
   n35="}" { n34 = JTBToolkit.makeNodeToken(n35); }
   n37="catch" { n36 = JTBToolkit.makeNodeToken(n37); }
   n39="(" { n38 = JTBToolkit.makeNodeToken(n39); }
   n40=Identifier()
   n41=Identifier()
   n43=")" { n42 = JTBToolkit.makeNodeToken(n43); }
   n45="{" { n44 = JTBToolkit.makeNodeToken(n45); }
   n47="}" { n46 = JTBToolkit.makeNodeToken(n47); }
   n49="}" { n48 = JTBToolkit.makeNodeToken(n49); }
   n51="}" { n50 = JTBToolkit.makeNodeToken(n51); }
   
   { return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n28,n30,n32,n34,n36,n38,n40,n41,n42,n44,n46,n48,n50); }
}

TypeDeclaration TypeDeclaration() :
{
   NodeChoice n0;
   ClassDeclaration n1;
   ClassExtendsDeclaration n2;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ClassDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassExtendsDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TypeDeclaration(n0); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDeclaration n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=VarDeclaration()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8="}" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ClassDeclaration(n0,n2,n3,n5,n7); }
}

ClassExtendsDeclaration ClassExtendsDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   VarDeclaration n10;
   NodeListOptional n11 = new NodeListOptional();
   MethodDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="extends" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="Thread" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=VarDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   (
      n12=MethodDeclaration()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   n14="}" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ClassExtendsDeclaration(n0,n2,n3,n5,n7,n9,n11,n13); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDeclaration(n0,n1,n2); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16 = new NodeListOptional();
   VarDeclaration n17;
   NodeListOptional n18 = new NodeListOptional();
   QParStatement n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   Identifier n26;
   Identifier n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="void" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="run" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   n13="try" { n12 = JTBToolkit.makeNodeToken(n13); }
   n15="{" { n14 = JTBToolkit.makeNodeToken(n15); }
   (
      LOOKAHEAD(2)
      n17=VarDeclaration()
      { n16.addNode(n17); }
   )*
   { n16.nodes.trimToSize(); }
   (
      n19=QParStatement()
      { n18.addNode(n19); }
   )*
   { n18.nodes.trimToSize(); }
   n21="}" { n20 = JTBToolkit.makeNodeToken(n21); }
   n23="catch" { n22 = JTBToolkit.makeNodeToken(n23); }
   n25="(" { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=Identifier()
   n27=Identifier()
   n29=")" { n28 = JTBToolkit.makeNodeToken(n29); }
   n31="{" { n30 = JTBToolkit.makeNodeToken(n31); }
   n33="}" { n32 = JTBToolkit.makeNodeToken(n33); }
   n35="}" { n34 = JTBToolkit.makeNodeToken(n35); }
   
   { return new MethodDeclaration(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n27,n28,n30,n32,n34); }
}

Type Type() :
{
   NodeChoice n0;
   BooleanType n1;
   IntegerType n2;
   Identifier n3;

   
}
{
   (
      n1=BooleanType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IntegerType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Identifier()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Type(n0); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

QParStatement QParStatement() :
{
   NodeListOptional n0 = new NodeListOptional();
   Ann n1;
   Statement n2;

   
}
{
   (
      n1=Ann()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n2=Statement()
   
   { return new QParStatement(n0,n2); }
}

Ann Ann() :
{
   NodeToken n0;
   Token n1;
   Label n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<SCOMMENT1> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Label()
   n4=<SCOMMENT2> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Ann(n0,n2,n3); }
}

Label Label() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Identifier()
   n2=":" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new Label(n0,n1); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   FieldAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   MessageSend n6;
   PrintStatement n7;
   SynchStatement n8;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(FieldAssignmentStatement())
      n3=FieldAssignmentStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=MessageSend()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=PrintStatement()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=SynchStatement()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   QParStatement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=QParStatement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

FieldAssignmentStatement FieldAssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Identifier()
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new FieldAssignmentStatement(n0,n1,n3,n4,n6,n7); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   n9="else" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8,n10); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

SynchStatement SynchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="synchronized" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new SynchStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

Expression Expression() :
{
   NodeChoice n0;
   AndExpression n1;
   CompareExpression n2;
   PlusExpression n3;
   MinusExpression n4;
   TimesExpression n5;
   FieldRead n6;
   PrimaryExpression n7;

   
}
{
   (
      LOOKAHEAD(Identifier() "&&")
      n1=AndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Identifier() "<")
      n2=CompareExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(Identifier() "+")
      n3=PlusExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(Identifier() "-")
      n4=MinusExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(Identifier() "*")
      n5=TimesExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(FieldRead())
      n6=FieldRead()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=PrimaryExpression()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new Expression(n0); }
}

AndExpression AndExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="&&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new AndExpression(n0,n1,n3); }
}

CompareExpression CompareExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new CompareExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new TimesExpression(n0,n1,n3); }
}

FieldRead FieldRead() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new FieldRead(n0,n1,n3); }
}

MessageSend MessageSend() :
{
   NodeChoice n0;
   callStartMethod n1;
   callNotifyMethod n2;
   callNotifyAllMethod n3;
   callWaitMethod n4;
   callJoinMethod n5;

   
}
{
   (
      LOOKAHEAD(callStartMethod())
      n1=callStartMethod()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(callNotifyMethod())
      n2=callNotifyMethod()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(callNotifyAllMethod())
      n3=callNotifyAllMethod()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(callWaitMethod())
      n4=callWaitMethod()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=callJoinMethod()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new MessageSend(n0); }
}

callStartMethod callStartMethod() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="start" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new callStartMethod(n0,n1,n3,n5,n7,n9); }
}

callNotifyMethod callNotifyMethod() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="notify" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new callNotifyMethod(n0,n1,n3,n5,n7,n9); }
}

callNotifyAllMethod callNotifyAllMethod() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="notifyAll" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new callNotifyAllMethod(n0,n1,n3,n5,n7,n9); }
}

callWaitMethod callWaitMethod() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="wait" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new callWaitMethod(n0,n1,n3,n5,n7,n9); }
}

callJoinMethod callJoinMethod() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="join" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new callJoinMethod(n0,n1,n3,n5,n7,n9); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ThisExpression n5;
   AllocationExpression n6;
   NotExpression n7;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ThisExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=AllocationExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=NotExpression()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ThisExpression(n0); }
}

AllocationExpression AllocationExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AllocationExpression(n0,n2,n3,n5); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new NotExpression(n0,n2); }
}

Query Query() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<SCOMMENT1> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="mhp?" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   n7=<SCOMMENT2> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Query(n0,n2,n3,n5,n6); }
}
